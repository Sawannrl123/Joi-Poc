{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firstNameSchema","Joi","string","required","min","label","messages","lastNameSchema","emailSchema","email","minDomainSegments","tlds","allow","passwordSchema","pattern","confirmPasswordSchema","schema","object","firstName","lastName","password","confirmPassword","any","equal","ref","options","abortEarly","initialState","App","useState","profileInfo","setProfileInfo","profileInfoError","setProfileInfoError","handleChange","e","prevState","target","name","value","handleError","key","attempt","error","message","validateField","valid","console","log","className","type","onChange","onBlur","onClick","validate","details","errorObj","reduce","initial","current","path","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAIMA,EAAkBC,IAAIC,SACzBC,WACAC,IAAI,GACJC,MAAM,cACNC,SAAS,CACR,eAAe,iCACf,aAAa,oDAGXC,EAAiBN,IAAIC,SACxBC,WACAC,IAAI,GACJC,MAAM,aACNC,SAAS,CACR,eAAe,iCACf,aAAa,oDAGXE,EAAcP,IAAIC,SACrBC,WACAM,MAAM,CACLC,kBAAmB,EACnBC,KAAM,CAAEC,MAAO,CAAC,MAAO,UAExBP,MAAM,SACNC,SAAS,CACR,eAAe,mCAGbO,EAAiBZ,IAAIC,SACxBC,WACAW,QAAQ,uBACRT,MAAM,YACNC,SAAS,CACR,eAAe,iCACf,sBAAsB,uEAGpBS,EAAwBd,IAAIC,SAC/BC,WACAW,QAAQ,uBACRT,MAAM,oBACNC,SAAS,CACR,eAAe,iCACf,sBAAsB,uEAGpBU,EAASf,IAAIgB,OAAO,CACxBC,UAAWjB,IAAIC,SAASC,WAAWC,IAAI,GAAGC,MAAM,cAAcC,SAAS,CACrE,eAAe,iCACf,aAAa,oDAEfa,SAAUlB,IAAIC,SAASC,WAAWC,IAAI,GAAGC,MAAM,aAAaC,SAAS,CACnE,eAAe,iCACf,aAAa,oDAEfG,MAAOR,IAAIC,SACRC,WACAM,MAAM,CACLC,kBAAmB,EACnBC,KAAM,CAAEC,MAAO,CAAC,MAAO,UAExBP,MAAM,SACNC,SAAS,CACR,eAAe,mCAEnBc,SAAUnB,IAAIC,SAASY,QAAQ,uBAC/BO,gBAAiBpB,IAAIqB,MAClBC,MAAMtB,IAAIuB,IAAI,aACdrB,WACAE,MAAM,oBACNC,SAAS,CAAE,WAAY,gCACzBmB,QAAQ,CAAEC,YAAY,IAEnBC,EAAe,CACnBT,UAAW,GACXC,SAAU,GACVV,MAAO,GACPW,SAAU,GACVC,gBAAiB,IAgJJO,MA7If,WAAgB,IAAD,EACyBC,mBAASF,GADlC,mBACNG,EADM,KACOC,EADP,OAEmCF,mBAASF,GAF5C,mBAENK,EAFM,KAEYC,EAFZ,KAIPC,EAAe,SAACC,GACpBJ,GAAe,SAACK,GAAD,mBAAC,eACXA,GADU,kBAEZD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,YAIxBC,EAAc,SAACC,EAAKF,EAAOvB,GAC/B,IAME,OALAf,IAAIyC,QAAQH,EAAOvB,GACnBiB,GAAoB,SAAAG,GAAS,kCACxBA,GADwB,kBAE1BK,EAAM,SAEF,EACP,MAAOE,GAKP,OAJAV,GAAoB,SAAAG,GAAS,kCACxBA,GADwB,kBAE1BK,EAAME,EAAMC,cAER,IAILC,EAAgB,SAACV,GACrB,IAAMG,EAAOH,EAAEE,OAAOC,KAChBC,EAAQJ,EAAEE,OAAOE,MACvB,OAAQD,GACN,IAAK,YACHE,EAAYF,EAAMC,EAAOvC,GACzB,MACF,IAAK,WACHwC,EAAYF,EAAMC,EAAOhC,GACzB,MACF,IAAK,QACHiC,EAAYF,EAAMC,EAAO/B,GACzB,MACF,IAAK,WACHgC,EAAYF,EAAMC,EAAO1B,GACzB,MACF,IAAK,kBACH,IAAMiC,EAAQN,EAAYF,EAAMC,EAAOxB,GACnC+B,GAAShB,EAAYV,WAAaU,EAAYT,gBAChDY,GAAoB,SAACG,GAAD,mBAAC,eAChBA,GADe,kBAEjBE,EAAO,+CAEDQ,GACTb,GAAoB,SAACG,GAAD,mBAAC,eAChBA,GADe,IAElBf,gBAAiB,QAGrB,MACF,QACE0B,QAAQC,IAAI,aAkBlB,OACE,sBAAKC,UAAU,MAAf,UACE,gCACE,iDACA,uBACEC,KAAK,OACLX,MAAOT,EAAYZ,UACnBoB,KAAK,YACLa,SAAUjB,EACVkB,OAAQP,IAETb,EAAiBd,WAAa,4BAAIc,EAAiBd,eAEtD,gCACE,gDACA,uBACEgC,KAAK,OACLX,MAAOT,EAAYX,SACnBmB,KAAK,WACLa,SAAUjB,EACVkB,OAAQP,IAETb,EAAiBb,UAAY,4BAAIa,EAAiBb,cAErD,gCACE,4CACA,uBACE+B,KAAK,QACLX,MAAOT,EAAYrB,MACnB6B,KAAK,QACLa,SAAUjB,EACVkB,OAAQP,IAETb,EAAiBvB,OAAS,4BAAIuB,EAAiBvB,WAElD,gCACE,+CACA,uBACEyC,KAAK,WACLX,MAAOT,EAAYV,SACnBkB,KAAK,WACLa,SAAUjB,EACVkB,OAAQP,IAETb,EAAiBZ,UAAY,4BAAIY,EAAiBZ,cAErD,gCACE,uDACA,uBACE8B,KAAK,WACLX,MAAOT,EAAYT,gBACnBiB,KAAK,kBACLa,SAAUjB,EACVkB,OAAQP,IAETb,EAAiBX,iBAChB,4BAAIW,EAAiBX,qBAGzB,wBAAQgC,QAzES,WAAO,IAAD,EACWrC,EAAOsC,SAASxB,GAA5Ca,MAASY,GADQ,aACI,GADJ,GACRA,QACjB,GAAIA,EAAS,CACX,IAAMC,EAAWD,EAAQE,QAAO,SAACC,EAASC,GAAV,mBAAC,eAC5BD,GAD2B,kBAE7BC,EAAQC,KAAK,GAAKD,EAAQf,YACzBjB,GACJM,EAAoBuB,QAEpBvB,EAAoBN,GACpBkC,MAAM,cA+DN,0BClNSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.856006a5.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport Joi from \"joi\";\nimport \"./App.css\";\n\nconst firstNameSchema = Joi.string()\n  .required()\n  .min(5)\n  .label(\"First Name\")\n  .messages({\n    \"string.empty\": `Your {#label} can not be empty`,\n    \"string.min\": `Your {#label} has to be at least {#limit} chars`,\n  });\n\nconst lastNameSchema = Joi.string()\n  .required()\n  .min(5)\n  .label(\"Last Name\")\n  .messages({\n    \"string.empty\": `Your {#label} can not be empty`,\n    \"string.min\": `Your {#label} has to be at least {#limit} chars`,\n  });\n\nconst emailSchema = Joi.string()\n  .required()\n  .email({\n    minDomainSegments: 2,\n    tlds: { allow: [\"com\", \"net\"] },\n  })\n  .label(\"Email\")\n  .messages({\n    \"string.empty\": `Your {#label} can not be empty`,\n  });\n\nconst passwordSchema = Joi.string()\n  .required()\n  .pattern(/^[a-zA-Z0-9]{3,30}$/)\n  .label(\"Password\")\n  .messages({\n    \"string.empty\": `Your {#label} can not be empty`,\n    \"string.pattern.base\": `Your {#label} should be alphanumeric and within 3 to 30 characters`,\n  });\n\nconst confirmPasswordSchema = Joi.string()\n  .required()\n  .pattern(/^[a-zA-Z0-9]{3,30}$/)\n  .label(\"Confirm Password\")\n  .messages({\n    \"string.empty\": `Your {#label} can not be empty`,\n    \"string.pattern.base\": `Your {#label} should be alphanumeric and within 3 to 30 characters`,\n  });\n\nconst schema = Joi.object({\n  firstName: Joi.string().required().min(5).label(\"First Name\").messages({\n    \"string.empty\": `Your {#label} can not be empty`,\n    \"string.min\": `Your {#label} has to be at least {#limit} chars`,\n  }),\n  lastName: Joi.string().required().min(5).label(\"Last Name\").messages({\n    \"string.empty\": `Your {#label} can not be empty`,\n    \"string.min\": `Your {#label} has to be at least {#limit} chars`,\n  }),\n  email: Joi.string()\n    .required()\n    .email({\n      minDomainSegments: 2,\n      tlds: { allow: [\"com\", \"net\"] },\n    })\n    .label(\"Email\")\n    .messages({\n      \"string.empty\": `Your {#label} can not be empty`,\n    }),\n  password: Joi.string().pattern(/^[a-zA-Z0-9]{3,30}$/),\n  confirmPassword: Joi.any()\n    .equal(Joi.ref(\"password\"))\n    .required()\n    .label(\"Confirm password\")\n    .messages({ \"any.only\": \"{{#label}} does not match\" }),\n}).options({ abortEarly: false });\n\nconst initialState = {\n  firstName: \"\",\n  lastName: \"\",\n  email: \"\",\n  password: \"\",\n  confirmPassword: \"\",\n};\n\nfunction App() {\n  const [profileInfo, setProfileInfo] = useState(initialState);\n  const [profileInfoError, setProfileInfoError] = useState(initialState);\n\n  const handleChange = (e) => {\n    setProfileInfo((prevState) => ({\n      ...prevState,\n      [e.target.name]: e.target.value,\n    }));\n  };\n\n  const handleError = (key, value, schema) => {\n    try {\n      Joi.attempt(value, schema);\n      setProfileInfoError(prevState => ({\n        ...prevState,\n        [key]: ''\n      }));\n      return true;\n    } catch (error) {\n      setProfileInfoError(prevState => ({\n        ...prevState,\n        [key]: error.message\n      }));\n      return false;\n    }\n  };\n\n  const validateField = (e) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    switch (name) {\n      case \"firstName\":\n        handleError(name, value, firstNameSchema);\n        break;\n      case \"lastName\":\n        handleError(name, value, lastNameSchema);\n        break;\n      case \"email\":\n        handleError(name, value, emailSchema);\n        break;\n      case \"password\":\n        handleError(name, value, passwordSchema);\n        break;\n      case \"confirmPassword\":\n        const valid = handleError(name, value, confirmPasswordSchema);\n        if (valid && profileInfo.password !== profileInfo.confirmPassword) {\n          setProfileInfoError((prevState) => ({\n            ...prevState,\n            [name]: \"Confirm Password should match password.\",\n          }));\n        } else if (valid) {\n          setProfileInfoError((prevState) => ({\n            ...prevState,\n            confirmPassword: \"\",\n          }));\n        }\n        break;\n      default:\n        console.log(\"Default\");\n    }\n  };\n\n  const handleSubmit = () => {\n    const { error: { details } = {} } = schema.validate(profileInfo);\n    if (details) {\n      const errorObj = details.reduce((initial, current) => ({\n        ...initial,\n        [current.path[0]]: current.message\n      }), initialState);\n      setProfileInfoError(errorObj);\n    } else {\n      setProfileInfoError(initialState);\n      alert('Validated');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div>\n        <label>First Name: </label>\n        <input\n          type=\"text\"\n          value={profileInfo.firstName}\n          name=\"firstName\"\n          onChange={handleChange}\n          onBlur={validateField}\n        />\n        {profileInfoError.firstName && <p>{profileInfoError.firstName}</p>}\n      </div>\n      <div>\n        <label>Last Name: </label>\n        <input\n          type=\"text\"\n          value={profileInfo.lastName}\n          name=\"lastName\"\n          onChange={handleChange}\n          onBlur={validateField}\n        />\n        {profileInfoError.lastName && <p>{profileInfoError.lastName}</p>}\n      </div>\n      <div>\n        <label>Email: </label>\n        <input\n          type=\"email\"\n          value={profileInfo.email}\n          name=\"email\"\n          onChange={handleChange}\n          onBlur={validateField}\n        />\n        {profileInfoError.email && <p>{profileInfoError.email}</p>}\n      </div>\n      <div>\n        <label>Password: </label>\n        <input\n          type=\"password\"\n          value={profileInfo.password}\n          name=\"password\"\n          onChange={handleChange}\n          onBlur={validateField}\n        />\n        {profileInfoError.password && <p>{profileInfoError.password}</p>}\n      </div>\n      <div>\n        <label>Confirm Password: </label>\n        <input\n          type=\"password\"\n          value={profileInfo.confirmPassword}\n          name=\"confirmPassword\"\n          onChange={handleChange}\n          onBlur={validateField}\n        />\n        {profileInfoError.confirmPassword && (\n          <p>{profileInfoError.confirmPassword}</p>\n        )}\n      </div>\n      <button onClick={handleSubmit}>Continue</button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}