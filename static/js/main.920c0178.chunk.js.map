{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firstNameSchema","Joi","string","required","min","label","messages","lastNameSchema","emailSchema","email","minDomainSegments","tlds","allow","passwordSchema","pattern","confirmPasswordSchema","schema","object","username","alphanum","max","password","repeat_password","ref","access_token","number","birth_year","integer","options","abortEarly","with","xor","initialState","firstName","lastName","confirmPassword","App","useState","profileInfo","setProfileInfo","profileInfoError","setProfileInfoError","useEffect","validate","console","log","error","handleChange","e","prevState","target","name","value","handleError","key","attempt","message","validateField","valid","className","type","onChange","onBlur","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.920c0178.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport Joi from \"joi\";\nimport \"./App.css\";\n\nconst firstNameSchema = Joi.string()\n  .required()\n  .min(5)\n  .label(\"First Name\")\n  .messages({\n    \"string.empty\": `Your {#label} can not be empty`,\n    \"string.min\": `Your {#label} has to be at least {#limit} chars`,\n  });\n\nconst lastNameSchema = Joi.string()\n  .required()\n  .min(5)\n  .label(\"Last Name\")\n  .messages({\n    \"string.empty\": `Your {#label} can not be empty`,\n    \"string.min\": `Your {#label} has to be at least {#limit} chars`,\n  });\n\nconst emailSchema = Joi.string()\n  .required()\n  .email({\n    minDomainSegments: 2,\n    tlds: { allow: [\"com\", \"net\"] },\n  })\n  .label(\"Email\")\n  .messages({\n    \"string.empty\": `Your {#label} can not be empty`,\n  });\n\nconst passwordSchema = Joi.string()\n  .required()\n  .pattern(/^[a-zA-Z0-9]{3,30}$/)\n  .label(\"Password\")\n  .messages({\n    \"string.empty\": `Your {#label} can not be empty`,\n    \"string.pattern.base\": `Your {#label} should be alphanumeric and within 3 to 30 characters`,\n  });\n\nconst confirmPasswordSchema = Joi.string()\n  .required()\n  .pattern(/^[a-zA-Z0-9]{3,30}$/)\n  .label(\"Confirm Password\")\n  .messages({\n    \"string.empty\": `Your {#label} can not be empty`,\n    \"string.pattern.base\": `Your {#label} should be alphanumeric and within 3 to 30 characters`,\n  });\n\nconst schema = Joi.object({\n  username: Joi.string()\n    .alphanum()\n    .pattern(/^[a-zA-Z0-9]{3,30}$/)\n    .min(8)\n    .max(30)\n    .required()\n    .label(\"Username\")\n    .messages({\n      \"string.pattern.base\":\n        \"Your {#label} does not matche the suggested pattern\",\n      \"string.base\": `Your {#label} should match the suggested pattern`,\n      \"string.alphanum\": `Your {#label} must only contain alpha-numeric characters`,\n      \"string.empty\": `Your {#label} can not be empty`,\n      \"string.min\": `Your {#label} has to be at least {#limit} chars`,\n      \"string.max\": `Your {#label} can not be more then {#limit} chars`,\n      \"any.required\": `Your {#label} is required`,\n    }),\n  password: Joi.string().pattern(/^[a-zA-Z0-9]{3,30}$/),\n  repeat_password: Joi.ref(\"password\"),\n  access_token: [Joi.string(), Joi.number()],\n  birth_year: Joi.number().integer().min(1900).max(2013),\n  email: Joi.string().email({\n    minDomainSegments: 2,\n    tlds: { allow: [\"com\", \"net\"] },\n  }),\n})\n  .options({ abortEarly: false })\n  .with(\"username\", \"birth_year\")\n  .xor(\"password\", \"access_token\")\n  .with(\"password\", \"repeat_password\");\n\nconst initialState = {\n  firstName: \"\",\n  lastName: \"\",\n  email: \"\",\n  password: \"\",\n  confirmPassword: \"\",\n};\n\nfunction App() {\n  const [profileInfo, setProfileInfo] = useState(initialState);\n  const [profileInfoError, setProfileInfoError] = useState(initialState);\n\n  useEffect(() => {\n    const data = {\n      username: \"123saasffdaf ad sadf asdf adsf123saasffdaf ad sadf asdf adsf123saasffdaf ad sadf asdf adsf123saasffdaf ad sadf asdf adsf123saasffdaf ad sadf asdf adsf\",\n      password: \"\",\n      repeat_password: \"password\",\n      birth_year: 0,\n    };\n    const validate = schema.validate(data);\n    console.log({ validate: validate.error });\n  });\n\n  const handleChange = (e) => {\n    setProfileInfo((prevState) => ({\n      ...prevState,\n      [e.target.name]: e.target.value,\n    }));\n  };\n\n  const handleError = (key, value, schema) => {\n    try {\n      Joi.attempt(value, schema);\n      return true;\n    } catch (error) {\n      setProfileInfoError({\n        ...initialState,\n        [key]: error.message,\n      });\n      return false;\n    }\n  };\n\n  const validateField = (e) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    switch (name) {\n      case \"firstName\":\n        handleError(name, value, firstNameSchema);\n        break;\n      case \"lastName\":\n        handleError(name, value, lastNameSchema);\n        break;\n      case \"email\":\n        handleError(name, value, emailSchema);\n        break;\n      case \"password\":\n        handleError(name, value, passwordSchema);\n        break;\n      case \"confirmPassword\":\n        const valid = handleError(name, value, confirmPasswordSchema);\n        if(valid && profileInfo.password !== profileInfo.confirmPassword) {\n          setProfileInfoError({\n            ...initialState,\n            [name]: 'Confirm Password should match password.',\n          });\n        } else if (valid) {\n          setProfileInfoError(initialState);\n        }\n        break;\n      default:\n        setProfileInfoError(initialState);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div>\n        <label>First Name: </label>\n        <input\n          type=\"text\"\n          value={profileInfo.firstName}\n          name=\"firstName\"\n          onChange={handleChange}\n          onBlur={validateField}\n        />\n        {profileInfoError.firstName && <p>{profileInfoError.firstName}</p>}\n      </div>\n      <div>\n        <label>Last Name: </label>\n        <input\n          type=\"text\"\n          value={profileInfo.lastName}\n          name=\"lastName\"\n          onChange={handleChange}\n          onBlur={validateField}\n        />\n        {profileInfoError.lastName && <p>{profileInfoError.lastName}</p>}\n      </div>\n      <div>\n        <label>Email: </label>\n        <input\n          type=\"email\"\n          value={profileInfo.email}\n          name=\"email\"\n          onChange={handleChange}\n          onBlur={validateField}\n        />\n        {profileInfoError.email && <p>{profileInfoError.email}</p>}\n      </div>\n      <div>\n        <label>Password: </label>\n        <input\n          type=\"password\"\n          value={profileInfo.password}\n          name=\"password\"\n          onChange={handleChange}\n          onBlur={validateField}\n        />\n        {profileInfoError.password && <p>{profileInfoError.password}</p>}\n      </div>\n      <div>\n        <label>Confirm Password: </label>\n        <input\n          type=\"password\"\n          value={profileInfo.confirmPassword}\n          name=\"confirmPassword\"\n          onChange={handleChange}\n          onBlur={validateField}\n        />\n        {profileInfoError.confirmPassword && (\n          <p>{profileInfoError.confirmPassword}</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}